{"version":3,"file":"static/js/784.bc03c89f.chunk.js","mappings":"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","sources":["config/config.js","component/Message.jsx","modules/user/Login.jsx","modules/user/service.js","modules/blogs/index.js","routing/PublicRoutes.jsx","routing/Routing.jsx"],"sourcesContent":["export const Base_API = process.env.REACT_APP_BASE_API;\nexport const Base_User_Url = process.env.REACT_APP_BASE_USER_URL;\n","import { message } from \"antd\";\nconst successMessage = (content) => {\n  return message.success({\n    type: \"success\",\n    content: content,\n    duration: 2,\n  });\n};\nconst errorMessage = (content) => {\n  return message.error({\n    type: \"error\",\n    content: content,\n    duration: 2,\n  });\n};\nexport { successMessage, errorMessage };\n","import React, { useState } from \"react\";\nimport {\n  Button,\n  Card,\n  Form,\n  FormItem,\n  Input,\n  InputPassword,\n  Typography,\n  Space,\n} from \"../../component\";\nimport { useNavigate } from \"react-router-dom\";\nimport { login, register } from \"./service\";\nimport { errorMessage, successMessage } from \"../../component/Message\";\n\nconst Login = () => {\n  const [account, setAccount] = useState(\"login\");\n\n  const navigate = useNavigate();\n\n  const handleLogin = async (values) => {\n    try {\n      console.log(\"event :\", values);\n\n      const res = await login(values);\n\n      if (res.status === 200) {\n        localStorage.setItem(\"authToken\", res?.data.authToken);\n        successMessage(\"Login Successful\");\n\n        navigate(\"/view\");\n      } else {\n        throw new Error(\"Login Failed\");\n      }\n    } catch (error) {\n      errorMessage(\"Login Failed\");\n    }\n  };\n\n  const handleRegister = async (values) => {\n    try {\n      const res = await register(values);\n\n      if (res.status === 200) {\n        successMessage(\"Registered Successfull\");\n      } else {\n        throw new Error(\"Register failed\");\n      }\n    } catch (error) {\n      errorMessage(\"Register Failed\");\n    }\n  };\n\n  return (\n    <>\n      <img\n        src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3e/Blogger_logo.svg/2560px-Blogger_logo.svg.png\"\n        height={150}\n        width={300}\n        alt=\"img\"\n      />\n\n      <Card\n        title={account === \"login\" ? \"Login\" : \"Register\"}\n        style={{\n          fontFamily: \"fantasy\",\n          fontStyle: \"italic\",\n          width: 400,\n          margin: \"auto\",\n          marginTop: 50,\n          borderRadius: 10,\n          boxShadow: \"0 4px 8px rgba(0, 0, 0, 0.1)\",\n          backgroundColor: \"#f7f7f7\",\n        }}\n      >\n        <Form\n          data-testid=\"login-form\"\n          onFinish={account === \"login\" ? handleLogin : handleRegister}\n        >\n          {account === \"login\" ? (\n            <Space direction=\"vertical\">\n              <FormItem\n                label=\"Email\"\n                name=\"email\"\n                data-testid=\"email\"\n                rules={[{ required: true, message: \"Email is required\" }]}\n              >\n                <Input />\n              </FormItem>\n              <FormItem\n                label=\"Password\"\n                name=\"password\"\n                data-testid=\"pass\"\n                rules={[{ required: true, message: \"Password is required\" }]}\n              >\n                <InputPassword />\n              </FormItem>\n              <Button\n                type=\"primary\"\n                htmlType=\"submit\"\n                data-testid=\"loginBtn\"\n                block\n                name=\"Login\"\n              />\n              <Typography style={{ margin: \"10px 0\" }} name=\"OR\" />\n              <Button\n                data-testid=\"reg-btn\"\n                type=\"dashed\"\n                onClick={() => setAccount(\"register\")}\n                name=\" Create new account\"\n              />\n            </Space>\n          ) : (\n            <Space direction=\"vertical\">\n              <FormItem\n                label=\"Name\"\n                name=\"name\"\n                rules={[{ required: true, message: \"Name is required\" }]}\n              >\n                <Input />\n              </FormItem>\n              <FormItem\n                label=\"Email\"\n                name=\"email\"\n                rules={[{ required: true, message: \"Email is required\" }]}\n              >\n                <Input />\n              </FormItem>\n              <FormItem\n                label=\"Phone\"\n                name=\"phone\"\n                rules={[{ required: true, message: \"Phone is required\" }]}\n              >\n                <Input />\n              </FormItem>\n              <FormItem\n                label=\"Address\"\n                name=\"address\"\n                rules={[{ required: true, message: \"Address is required\" }]}\n              >\n                <Input />\n              </FormItem>\n              <FormItem\n                label=\"Password\"\n                name=\"password\"\n                rules={[\n                  { required: true, message: \"Password is required\" },\n                  {\n                    min: 8,\n                    message: \"Password must be at least 8 characters\",\n                  },\n                ]}\n                style={{ margin: 5 }}\n              >\n                <InputPassword />\n              </FormItem>\n              <Button\n                data-testid=\"register-btn\"\n                type=\"primary\"\n                block\n                htmlType=\"submit\"\n                name=\"Register\"\n              />\n              <Typography style={{ margin: \"10px 0\" }} name=\"OR\" />\n              <Button\n                data-testid=\"go-to-login\"\n                type=\"dashed\"\n                onClick={() => setAccount(\"login\")}\n                name=\"Already have an account\"\n              />\n            </Space>\n          )}\n        </Form>\n      </Card>\n    </>\n  );\n};\n\nexport default Login;\n","import axios from \"axios\";\nimport { Base_User_Url } from \"../../config/config\";\n\nconst login = async (values) => {\n  return await axios.post(`${Base_User_Url}/login`, values);\n};\n\nconst register = async (values) => {\n  return await axios.post(`${Base_User_Url}/register`, values);\n};\n\nexport { login, register };\n","import { lazy } from \"react\";\nconst Create = lazy(() => import(\"./Create\"));\nconst BulkUploadListing = lazy(() => import(\"./BulkUploadListing\"));\nconst DetailedView = lazy(() => import(\"./DetailedView\"));\nconst BulkUpload = lazy(() => import(\"./BulkUpload\"));\nconst NotFound = lazy(() => import(\"./NotFound\"));\nconst BulkErrorDetail = lazy(() => import(\"./BulkErrorDetail\"));\n\nconst View = lazy(() => import(\"./View\"));\n\nexport {\n  BulkErrorDetail,\n  BulkUpload,\n  BulkUploadListing,\n  Create,\n  DetailedView,\n  NotFound,\n  View,\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Outlet, useNavigate } from \"react-router-dom\";\n\nconst PublicRoutes = () => {\n  const [isUserAuthentic, setIsUserAuthentic] = useState(false);\n  const token = localStorage.getItem(\"authToken\");\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (token) {\n      setIsUserAuthentic(true);\n    }\n  }, [token, navigate]);\n\n  return isUserAuthentic ? navigate(\"/view\") : <Outlet />;\n};\n\nexport default PublicRoutes;\n","import { React, lazy } from \"react\";\nimport { BrowserRouter, Route, Routes } from \"react-router-dom\";\nimport { Login, NotFound } from \"../modules/index\";\nimport PublicRoutes from \"./PublicRoutes\";\nconst ProtectedRoute = lazy(() => import(\"./ProtectedRoute\"));\nconst View = lazy(() => import(\"../modules/blogs/View\"));\nconst DetailedView = lazy(() => import(\"../modules/blogs/DetailedView\"));\nconst Create = lazy(() => import(\"../modules/blogs/Create\"));\nconst BulkUpload = lazy(() => import(\"../modules/blogs/BulkUpload\"));\nconst BulkErrorDetail = lazy(() => import(\"../modules/blogs/BulkErrorDetail\"));\nconst BulkUploadListing = lazy(() =>\n  import(\"../modules/blogs/BulkUploadListing\")\n);\n\nconst Routing = () => {\n  return (\n    <BrowserRouter>\n      <Routes>\n        <Route element={<PublicRoutes />}>\n          <Route path=\"/\" element={<Login />} />\n        </Route>\n        <Route element={<ProtectedRoute />}>\n          <Route path=\"/view\" element={<View />} />\n          <Route path=\"/details/:id\" element={<DetailedView />} />\n          <Route path=\"/update/:id\" element={<Create />} />\n          <Route path=\"/upload\" element={<BulkUpload />} />\n          <Route path=\"/bulk-list\" element={<BulkUploadListing />} />\n          <Route\n            path=\"/bulk-errors/:session_id\"\n            element={<BulkErrorDetail />}\n          />\n          <Route path=\"*\" element={<NotFound />} />\n        </Route>\n      </Routes>\n    </BrowserRouter>\n  );\n};\n\nexport default Routing;\n"],"names":["Base_API","process","Base_User_Url","successMessage","content","message","success","type","duration","errorMessage","error","Login","account","setAccount","useState","navigate","useNavigate","_jsxs","_Fragment","children","_jsx","src","height","width","alt","Card","title","style","fontFamily","fontStyle","margin","marginTop","borderRadius","boxShadow","backgroundColor","Form","onFinish","async","console","log","values","res","axios","post","concat","login","status","Error","localStorage","setItem","data","authToken","register","Space","direction","FormItem","label","name","rules","required","Input","InputPassword","Button","htmlType","block","Typography","onClick","min","NotFound","lazy","PublicRoutes","isUserAuthentic","setIsUserAuthentic","token","getItem","useEffect","Outlet","ProtectedRoute","View","DetailedView","Create","BulkUpload","BulkErrorDetail","BulkUploadListing","Routing","BrowserRouter","Routes","Route","element","path"],"sourceRoot":""}